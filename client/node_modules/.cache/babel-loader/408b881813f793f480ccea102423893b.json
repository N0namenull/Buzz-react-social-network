{"ast":null,"code":"import { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { apiResponsesMessage, Urls } from 'data/constants/api';\nimport { defaultToast } from 'data/constants/toast';\nexport const instance = axios.create({\n  baseURL: Urls.server_url,\n  withCredentials: true\n});\nexport const photoApi = {\n  getPhotos: async () => {\n    try {\n      const response = await instance.get(Urls.photo);\n      return response.data.data;\n    } catch (error) {\n      var _error$response;\n\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        return apiResponsesMessage.needAuth;\n      }\n\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  addPhoto: async data => {\n    try {\n      const response = await instance.post(Urls.photo, {\n        data\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      toast.success(response.data.message, defaultToast);\n      return response.data.data;\n    } catch (error) {\n      var _error$response2;\n\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        return error.response.data.message;\n      }\n\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  deletePhoto: async data => {\n    try {\n      await instance.delete(`${Urls.photo}/${data}`);\n      return apiResponsesMessage.success;\n    } catch (error) {\n      var _error$response3;\n\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        return error.response.data.message;\n      }\n\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  }\n};","map":{"version":3,"names":["toast","axios","apiResponsesMessage","Urls","defaultToast","instance","create","baseURL","server_url","withCredentials","photoApi","getPhotos","response","get","photo","data","error","status","needAuth","warn","unexpected","addPhoto","post","headers","success","message","deletePhoto","delete"],"sources":["E:/Uprojects/Codenk/rogalik/client/src/api/photo-api/index.ts"],"sourcesContent":["import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nimport { apiResponsesMessage, Urls } from 'data/constants/api';\nimport { defaultToast } from 'data/constants/toast';\nimport { IPhoto } from 'types/common';\n\nexport const instance = axios.create({\n   baseURL: Urls.server_url,\n   withCredentials: true,\n});\n\nexport const photoApi = {\n   getPhotos: async () => {\n      try {\n         const response = await instance.get<{ message: string, data: IPhoto[] }>(Urls.photo);\n\n         return response.data.data;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return apiResponsesMessage.needAuth;\n         }\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   addPhoto: async (data: string) => {\n      try {\n         const response = await instance.post<{ message: string, data: IPhoto }>(\n            Urls.photo,\n            { data },\n            { headers: { 'Content-Type': 'application/json' } },\n         );\n\n         toast.success(response.data.message, defaultToast);\n         \n         return response.data.data;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return error.response.data.message;\n         }\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   deletePhoto: async (data: number) => {\n      try {\n         await instance.delete<{ message: string }>(`${Urls.photo}/${data}`);\n\n         return apiResponsesMessage.success;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return error.response.data.message;\n         }\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n};\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,mBAAT,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAGA,OAAO,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;EAClCC,OAAO,EAAEJ,IAAI,CAACK,UADoB;EAElCC,eAAe,EAAE;AAFiB,CAAb,CAAjB;AAKP,OAAO,MAAMC,QAAQ,GAAG;EACrBC,SAAS,EAAE,YAAY;IACpB,IAAI;MACD,MAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,GAAT,CAAkDV,IAAI,CAACW,KAAvD,CAAvB;MAEA,OAAOF,QAAQ,CAACG,IAAT,CAAcA,IAArB;IACF,CAJD,CAIE,OAAOC,KAAP,EAAmB;MAAA;;MAClB,IAAI,oBAAAA,KAAK,CAACJ,QAAN,oEAAgBK,MAAhB,MAA2B,GAA/B,EAAoC;QACjC,OAAOf,mBAAmB,CAACgB,QAA3B;MACF;;MAEDlB,KAAK,CAACmB,IAAN,CAAWjB,mBAAmB,CAACkB,UAA/B,EAA2ChB,YAA3C;MAEA,OAAOF,mBAAmB,CAACkB,UAA3B;IACF;EACH,CAfoB;EAiBrBC,QAAQ,EAAE,MAAON,IAAP,IAAwB;IAC/B,IAAI;MACD,MAAMH,QAAQ,GAAG,MAAMP,QAAQ,CAACiB,IAAT,CACpBnB,IAAI,CAACW,KADe,EAEpB;QAAEC;MAAF,CAFoB,EAGpB;QAAEQ,OAAO,EAAE;UAAE,gBAAgB;QAAlB;MAAX,CAHoB,CAAvB;MAMAvB,KAAK,CAACwB,OAAN,CAAcZ,QAAQ,CAACG,IAAT,CAAcU,OAA5B,EAAqCrB,YAArC;MAEA,OAAOQ,QAAQ,CAACG,IAAT,CAAcA,IAArB;IACF,CAVD,CAUE,OAAOC,KAAP,EAAmB;MAAA;;MAClB,IAAI,qBAAAA,KAAK,CAACJ,QAAN,sEAAgBK,MAAhB,MAA2B,GAA/B,EAAoC;QACjC,OAAOD,KAAK,CAACJ,QAAN,CAAeG,IAAf,CAAoBU,OAA3B;MACF;;MAEDzB,KAAK,CAACmB,IAAN,CAAWjB,mBAAmB,CAACkB,UAA/B,EAA2ChB,YAA3C;MAEA,OAAOF,mBAAmB,CAACkB,UAA3B;IACF;EACH,CArCoB;EAuCrBM,WAAW,EAAE,MAAOX,IAAP,IAAwB;IAClC,IAAI;MACD,MAAMV,QAAQ,CAACsB,MAAT,CAAsC,GAAExB,IAAI,CAACW,KAAM,IAAGC,IAAK,EAA3D,CAAN;MAEA,OAAOb,mBAAmB,CAACsB,OAA3B;IACF,CAJD,CAIE,OAAOR,KAAP,EAAmB;MAAA;;MAClB,IAAI,qBAAAA,KAAK,CAACJ,QAAN,sEAAgBK,MAAhB,MAA2B,GAA/B,EAAoC;QACjC,OAAOD,KAAK,CAACJ,QAAN,CAAeG,IAAf,CAAoBU,OAA3B;MACF;;MAEDzB,KAAK,CAACmB,IAAN,CAAWjB,mBAAmB,CAACkB,UAA/B,EAA2ChB,YAA3C;MAEA,OAAOF,mBAAmB,CAACkB,UAA3B;IACF;EACH;AArDoB,CAAjB"},"metadata":{},"sourceType":"module"}