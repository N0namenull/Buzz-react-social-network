{"ast":null,"code":"import createSagaMiddleware from 'redux-saga';\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport rootSaga from './sagas/root-saga';\nimport chatsSlice from './slices/chats-slice';\nimport friendsSlice from './slices/friends-slice';\nimport personSlice from './slices/person-slice';\nimport photosSlice from './slices/photos-slice';\nimport postsSlice from './slices/posts-slice';\nimport userSlice from './slices/user-slice';\nconst sagaMiddleware = createSagaMiddleware();\nexport const rootReducer = combineReducers({\n  userSlice,\n  personSlice,\n  friendsSlice,\n  postsSlice,\n  photosSlice,\n  chatsSlice\n});\nexport const setupStore = function () {\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return configureStore({\n    reducer: rootReducer,\n    preloadedState: initialState,\n    middleware: [sagaMiddleware]\n  });\n};\nexport const store = setupStore();\nsagaMiddleware.run(rootSaga); // типизируем стор и диспатчи","map":{"version":3,"names":["createSagaMiddleware","combineReducers","configureStore","rootSaga","chatsSlice","friendsSlice","personSlice","photosSlice","postsSlice","userSlice","sagaMiddleware","rootReducer","setupStore","initialState","reducer","preloadedState","middleware","store","run"],"sources":["E:/Uprojects/Codenk/Diplom/client/src/store/store.ts"],"sourcesContent":["import createSagaMiddleware from 'redux-saga';\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\n\nimport rootSaga from './sagas/root-saga';\nimport chatsSlice from './slices/chats-slice';\nimport friendsSlice from './slices/friends-slice';\nimport personSlice from './slices/person-slice';\nimport photosSlice from './slices/photos-slice';\nimport postsSlice from './slices/posts-slice';\nimport userSlice from './slices/user-slice';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const rootReducer = combineReducers({\n   userSlice,\n   personSlice,\n   friendsSlice,\n   postsSlice,\n   photosSlice,\n   chatsSlice,\n});\n\nexport const setupStore = (initialState = {}) => {\n   return configureStore({\n      reducer: rootReducer,\n      preloadedState: initialState,\n      middleware: [sagaMiddleware],\n   });\n};\n\nexport const store = setupStore();\n\nsagaMiddleware.run(rootSaga);\n\n// типизируем стор и диспатчи\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppStore = ReturnType<typeof setupStore>;\nexport type AppDispatch = AppStore['dispatch'];\n"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,YAAjC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,MAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AAEA,OAAO,MAAMW,WAAW,GAAGV,eAAe,CAAC;EACxCQ,SADwC;EAExCH,WAFwC;EAGxCD,YAHwC;EAIxCG,UAJwC;EAKxCD,WALwC;EAMxCH;AANwC,CAAD,CAAnC;AASP,OAAO,MAAMQ,UAAU,GAAG,YAAuB;EAAA,IAAtBC,YAAsB,uEAAP,EAAO;EAC9C,OAAOX,cAAc,CAAC;IACnBY,OAAO,EAAEH,WADU;IAEnBI,cAAc,EAAEF,YAFG;IAGnBG,UAAU,EAAE,CAACN,cAAD;EAHO,CAAD,CAArB;AAKF,CANM;AAQP,OAAO,MAAMO,KAAK,GAAGL,UAAU,EAAxB;AAEPF,cAAc,CAACQ,GAAf,CAAmBf,QAAnB,E,CAEA"},"metadata":{},"sourceType":"module"}