{"ast":null,"code":"import { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { apiResponsesMessage, Urls } from 'data/constants/api';\nimport { defaultToast } from 'data/constants/toast';\nexport const instance = axios.create({\n  baseURL: Urls.server_url,\n  withCredentials: true\n});\nexport const chatApi = {\n  getChats: async () => {\n    try {\n      const response = await instance.get(`${Urls.chat}`);\n      return response.data.chats;\n    } catch (error) {\n      var _error$response;\n\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        return apiResponsesMessage.needAuth;\n      }\n\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  createChat: async data => {\n    try {\n      const response = await instance.post(Urls.chat, {\n        user_username: data[0],\n        person_username: data[1]\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.chat;\n    } catch (error) {\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  deleteChat: async data => {\n    try {\n      await instance.delete(`${Urls.chat}/${data}`);\n      return apiResponsesMessage.success;\n    } catch (error) {\n      var _error$response2;\n\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n        return apiResponsesMessage.needAuth;\n      }\n\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  createMessage: async data => {\n    try {\n      await instance.post(Urls.message, { ...data\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return apiResponsesMessage.success;\n    } catch (error) {\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  },\n  getMessage: async data => {\n    try {\n      const response = await instance.get(`${Urls.message}/${data.chat_id}`, {\n        signal: data.controller.signal\n      });\n      return response.data.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        return apiResponsesMessage.needAuth;\n      } // когда время ожидания заканчивается, сервер прерывает запрос\n\n\n      if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 307) {\n        return apiResponsesMessage.requestExpired;\n      } // проверка что запрос был отменен через AbortController\n\n\n      if (axios.isCancel(error)) {\n        return apiResponsesMessage.unexpected;\n      }\n\n      ;\n      toast.warn(apiResponsesMessage.unexpected, defaultToast);\n      return apiResponsesMessage.unexpected;\n    }\n  }\n};","map":{"version":3,"names":["toast","axios","apiResponsesMessage","Urls","defaultToast","instance","create","baseURL","server_url","withCredentials","chatApi","getChats","response","get","chat","data","chats","error","status","needAuth","warn","unexpected","createChat","post","user_username","person_username","headers","deleteChat","delete","success","createMessage","message","getMessage","chat_id","signal","controller","requestExpired","isCancel"],"sources":["E:/Uprojects/Codenk/Diplom/client/src/api/chat-api/index.ts"],"sourcesContent":["import { toast } from 'react-toastify';\nimport axios from 'axios';\n\nimport { apiResponsesMessage, Urls } from 'data/constants/api';\nimport { defaultToast } from 'data/constants/toast';\nimport { IChat, IMessage } from 'types/common';\nimport { ICreateMessagePayload, IGetMessagePayload } from 'types/sagas/chat';\n\nexport const instance = axios.create({\n   baseURL: Urls.server_url,\n   withCredentials: true,\n});\n\nexport const chatApi = {\n   getChats: async () => {\n      try {\n         const response = await instance.get<{ message: string, chats: IChat[] }>(`${Urls.chat}`);\n\n         return response.data.chats;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return apiResponsesMessage.needAuth;\n         }\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   createChat: async (data: string[]) => {\n      try {\n         const response = await instance.post<{ message: string, chat: IChat }>(\n            Urls.chat,\n            { user_username: data[0], person_username: data[1] },\n            { headers: { 'Content-Type': 'application/json' } },\n         );\n\n         return response.data.chat;\n      } catch (error) {\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   deleteChat: async (data: number) => {\n      try {\n         await instance.delete<{ message: string }>(`${Urls.chat}/${data}`);\n\n         return apiResponsesMessage.success;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return apiResponsesMessage.needAuth;\n         }\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   createMessage: async (data: ICreateMessagePayload) => {\n      try {\n         await instance.post<{ message: string }>(\n            Urls.message,\n            { ...data },\n            { headers: { 'Content-Type': 'application/json' } },\n         );\n\n         return apiResponsesMessage.success;\n      } catch (error) {\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n\n   getMessage: async (data: IGetMessagePayload) => {\n      try {\n         const response = await instance.get<{ message: string, data?: IMessage }>(\n            `${Urls.message}/${data.chat_id}`,\n            { signal: data.controller.signal },\n         );\n\n         return response.data.data;\n      } catch (error: any) {\n         if (error.response?.status === 401) {\n            return apiResponsesMessage.needAuth;\n         }\n\n         // когда время ожидания заканчивается, сервер прерывает запрос\n         if (error.response?.status === 307) {\n            return apiResponsesMessage.requestExpired;\n         }\n\n         // проверка что запрос был отменен через AbortController\n         if (axios.isCancel(error)) {\n            return apiResponsesMessage.unexpected;\n         };\n\n         toast.warn(apiResponsesMessage.unexpected, defaultToast);\n         \n         return apiResponsesMessage.unexpected;\n      }\n   },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}