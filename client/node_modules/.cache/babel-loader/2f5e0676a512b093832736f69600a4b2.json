{"ast":null,"code":"import { call, put, select } from 'redux-saga/effects';\nimport { postApi } from 'api/post-api';\nimport { apiResponsesMessage } from 'data/constants/api';\nimport { addPostAction, addPostsAction, changeLikePostAction, changePostStatusAction, deletePostAction } from 'store/slices/posts-slice';\nimport { changeAuthUserAction } from 'store/slices/user-slice';\nexport function* workerGetUserPosts() {\n  const response = yield call(postApi.getPosts);\n\n  if (response === apiResponsesMessage.needAuth) {\n    yield put(changeAuthUserAction(false));\n  } else if (response === apiResponsesMessage.unexpected) {\n    return;\n  } else if (typeof response !== 'string') {\n    yield put(addPostsAction(response));\n  }\n}\n;\nexport function* workerCreatePost(data) {\n  yield put(changePostStatusAction('create'));\n  const response = yield call(postApi.createPost, data.payload);\n\n  if (typeof response !== 'string') {\n    yield put(addPostAction(response));\n  }\n\n  if (response === apiResponsesMessage.needAuth) {\n    yield put(changeAuthUserAction(false));\n  }\n\n  yield put(changePostStatusAction('ready'));\n}\n;\nexport function* workerDeletePost(data) {\n  const response = yield call(postApi.deletePost, data.payload);\n\n  if (response === apiResponsesMessage.needAuth) {\n    yield put(changeAuthUserAction(false));\n  } else if (response === apiResponsesMessage.unexpected) {\n    return;\n  } else if (response === apiResponsesMessage.success) {\n    yield put(deletePostAction(data.payload));\n  }\n}\n;\nexport function* workerCreateLike(data) {\n  const response = yield call(postApi.createLike, data.payload);\n\n  if (response === apiResponsesMessage.needAuth) {\n    yield put(changeAuthUserAction(false));\n  } else if (response === apiResponsesMessage.unexpected) {\n    return;\n  } else if (response === apiResponsesMessage.success) {\n    const {\n      posts\n    } = yield select(store => store.postsSlice);\n    let currentPost = posts.filter(elem => elem.id === data.payload.postId);\n    currentPost = { ...currentPost[0]\n    };\n    currentPost.isLike = true;\n    currentPost.likes += 1;\n    yield put(changeLikePostAction(currentPost));\n  }\n}\n;\nexport function* workerDeleteLike(data) {\n  const response = yield call(postApi.deleteLike, data.payload);\n\n  if (response === apiResponsesMessage.success) {\n    const {\n      posts\n    } = yield select(store => store.postsSlice);\n    let currentPost = posts.filter(elem => elem.id === data.payload.postId);\n    currentPost = { ...currentPost[0]\n    };\n    currentPost.isLike = false;\n    currentPost.likes -= 1;\n    yield put(changeLikePostAction(currentPost));\n  }\n\n  if (response === apiResponsesMessage.needAuth) {\n    yield put(changeAuthUserAction(false));\n  }\n}\n;","map":{"version":3,"names":["call","put","select","postApi","apiResponsesMessage","addPostAction","addPostsAction","changeLikePostAction","changePostStatusAction","deletePostAction","changeAuthUserAction","workerGetUserPosts","response","getPosts","needAuth","unexpected","workerCreatePost","data","createPost","payload","workerDeletePost","deletePost","success","workerCreateLike","createLike","posts","store","postsSlice","currentPost","filter","elem","id","postId","isLike","likes","workerDeleteLike","deleteLike"],"sources":["E:/Uprojects/Codenk/rogalik/client/src/store/sagas/post-saga/workers.ts"],"sourcesContent":["import { call, put, select } from 'redux-saga/effects';\n\nimport { postApi } from 'api/post-api';\nimport { apiResponsesMessage } from 'data/constants/api';\nimport { addPostAction, addPostsAction, changeLikePostAction, changePostStatusAction, deletePostAction } from 'store/slices/posts-slice';\nimport { changeAuthUserAction } from 'store/slices/user-slice';\nimport { ILike, IPost } from 'types/common';\nimport { IWorker } from 'types/helpers';\n\nimport { INewPostData } from 'components/main-page/new-post/types';\n\nexport function* workerGetUserPosts() {\n   const response: IPost[] | string = yield call(postApi.getPosts);\n\n   if (response === apiResponsesMessage.needAuth) {\n      yield put(changeAuthUserAction(false));\n   } else if (response === apiResponsesMessage.unexpected) {\n      return;\n   } else if (typeof (response) !== 'string') {\n      yield put(addPostsAction(response));\n   }\n};\n\nexport function* workerCreatePost(data: IWorker<INewPostData>) {\n   yield put(changePostStatusAction('create'));\n\n   const response: IPost | string = yield call(postApi.createPost, data.payload);\n\n   if (typeof (response) !== 'string') {\n      yield put(addPostAction(response));\n   }\n\n   if (response === apiResponsesMessage.needAuth) {\n      yield put(changeAuthUserAction(false));\n   }\n\n   yield put(changePostStatusAction('ready'));\n};\n\nexport function* workerDeletePost(data: IWorker<number>) {\n   const response: string = yield call(postApi.deletePost, data.payload);\n\n   if (response === apiResponsesMessage.needAuth) {\n      yield put(changeAuthUserAction(false));\n   } else if (response === apiResponsesMessage.unexpected) {\n      return;\n   } else if (response === apiResponsesMessage.success) {\n      yield put(deletePostAction(data.payload));\n   }\n};\n\nexport function* workerCreateLike(data: IWorker<ILike>) {\n   const response: string = yield call(postApi.createLike, data.payload);\n\n   if (response === apiResponsesMessage.needAuth) {\n      yield put(changeAuthUserAction(false));\n   } else if (response === apiResponsesMessage.unexpected) {\n      return;\n   } else if (response === apiResponsesMessage.success) {\n      const { posts } = yield select(store => store.postsSlice);\n\n      let currentPost = posts.filter((elem: IPost) => elem.id === data.payload.postId);\n      currentPost = { ...currentPost[0] };\n      currentPost.isLike = true;\n      currentPost.likes += 1;\n\n      yield put(changeLikePostAction(currentPost));\n   }\n};\n\nexport function* workerDeleteLike(data: IWorker<ILike>) {\n   const response: string = yield call(postApi.deleteLike, data.payload);\n\n   if (response === apiResponsesMessage.success) {\n      const { posts } = yield select(store => store.postsSlice);\n\n      let currentPost = posts.filter((elem: IPost) => elem.id === data.payload.postId);\n      currentPost = { ...currentPost[0] };\n      currentPost.isLike = false;\n      currentPost.likes -= 1;\n\n      yield put(changeLikePostAction(currentPost));\n   }\n\n   if (response === apiResponsesMessage.needAuth) {\n      yield put(changeAuthUserAction(false));\n   }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}